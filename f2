import pygame as pg
from heapq import *


def get_circle(x, y):
    return (x * TILE + TILE // 2, y * TILE + TILE // 2), TILE // 4


def get_rect(x, y):
    return x * TILE + 1, y * TILE + 1, TILE - 2, TILE - 2


def get_next_nodes(x, y):
    check_next_node = lambda x, y: True if 0 <= x < cols and 0 <= y < rows else False
    ways = [-1, 0], [0, -1], [1, 0], [0, 1], [-2,-1],[-1,-2],[2,1],[1,2]
    return [(grid[y + dy][x + dx], (x + dx, y + dy)) for dx, dy in ways if check_next_node(x + dx, y + dy)]


cols, rows = 24, 34
TILE = 70

pg.init()
sc = pg.display.set_mode([cols * TILE, rows * TILE])
clock = pg.time.Clock()
# grid
grid = ['222222222222222222222222',
        '212111111111111112111211',
        '211122122221212212122212',
        '221122221121212212121112',
        '222112221121212211121222',
        '212211211221111212221212',
        '211211111122221212111212',
        '211212222111222212122212',
        '212222112221121211121112',
        '212121111122121222121212',
        '212111121121121112221212',
        '212211121121222111111212',
        '212211221121112222221222',
        '212111222122212211111122',
        '211122121221211222221212',
        '222122121121222212111112',
        '211122121221211222221212',
        '211222111221111111121212',
        '222212121111222212121212',
        '211112122121211212221112',
        '211111121122212212111122',
        '222211221112211212122112',
        '222212211212111212122212',
        '211111112211122212112112',
        '212222211211221112222122',
        '212222211211221112222122',
        '212111112212222211222112',
        '211222112112112111212122',
        '221222122211122111222112',
        '221122111221112122212212',
        '211112121111212121112112',
        '212111121222212122212122',
        '212111121222212122212122',
        '212222222222222222222222']
grid = [[int(char) for char in string ] for string in grid]

graph = {}
for y, row in enumerate(grid):
    for x, col in enumerate(row):
        graph[(x, y)] = graph.get((x, y), []) + get_next_nodes(x, y)

# BFS settings
start = (0, 7)
goal = (22, 7)
queue = []
heappush(queue, (0, start))
cost_visited = {start: 0}
visited = {start: None}

bg = pg.image.load('img/2.png').convert()
bg = pg.transform.scale(bg, (cols * TILE, rows * TILE))

while True:

    sc.blit(bg, (0, 0))

    [pg.draw.rect(sc, pg.Color('forestgreen'), get_rect(x, y), 1) for x, y in visited]
    [pg.draw.rect(sc, pg.Color('darkslategray'), get_rect(*xy)) for _, xy in queue]
    pg.draw.circle(sc, pg.Color('purple'), *get_circle(*goal))


    if queue:
        cur_cost, cur_node = heappop(queue)
        if cur_node == goal:
            queue = []
            continue

        next_nodes = graph[cur_node]
        for next_node in next_nodes:
            neigh_cost, neigh_node = next_node
            new_cost = cost_visited[cur_node] + neigh_cost

            if neigh_node not in cost_visited or new_cost < cost_visited[neigh_node]:
                heappush(queue, (new_cost, neigh_node))
                cost_visited[neigh_node] = new_cost
                visited[neigh_node] = cur_node


    path_head, path_segment = cur_node, cur_node
    while path_segment:
        pg.draw.circle(sc, pg.Color('brown'), *get_circle(*path_segment))
        path_segment = visited[path_segment]
    pg.draw.circle(sc, pg.Color('blue'), *get_circle(*start))
    pg.draw.circle(sc, pg.Color('magenta'), *get_circle(*path_head))

    [exit() for event in pg.event.get() if event.type == pg.QUIT]
    pg.display.flip()
    clock.tick(7)
